import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint

  # p^1 e p^2
def modelo_Lotka_Volterra(y, t, r1=2.5, d2=7.20, k1=0.50, k2=0.10):
    p1, p2 = y
    dp1 = p1 * (r1 - k1 * p2)
    dp2 = -p2 * (d2 - k2 * p1)
    print ("Dp1",dp1)
    print ("Dp2",dp2)
    return [dp1, dp2]
def simular_lotka_volterra( r1=2.5, d2=7.20, k1=0.50, k2=0.10, p1_ini=720, p2_ini=5, tempo=10, passo_tempo=0.01):
    y0 = [p1_ini, p2_ini]
    tempo_simulacao = np.arange(0, tempo, passo_tempo)
    solucao = odeint(modelo_Lotka_Volterra, y0, tempo_simulacao, args=(r1, d2, k1, k2))
    p1, p2 = solucao.T

    plt.figure(figsize=(10, 6))
    plt.subplot(2, 1, 1)
    plt.plot(p1, p2, 'b-', label='Presa vs. Predador')
    plt.xlabel('Presa')
    plt.ylabel('Predador')
    plt.axhline(y=r1/k1, color='r', linestyle='--', label='Equilíbrio Presa')
    plt.axvline(x=d2/k2, color='g', linestyle='--', label='Equilíbrio Predador')
    plt.legend()

    plt.subplot(2, 1, 2)
    plt.plot(tempo_simulacao, p1, 'b-', label='Presa', linewidth=2)
    plt.plot(tempo_simulacao, p2, 'r--', label='Predador', linewidth=2)
    plt.xlabel('Tempo')
    plt.ylabel('População')
    plt.legend()
    plt.tight_layout()
    plt.show()

simular_lotka_volterra()
